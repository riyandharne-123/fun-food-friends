{"version":3,"sources":["logo.svg","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","provider","auth","GoogleAuthProvider","App","state","currentItem","username","items","user","handleChange","bind","handleSubmit","login","logout","e","this","setState","target","name","value","signOut","then","signInWithPopup","result","preventDefault","itemsRef","database","ref","item","title","displayName","email","push","onAuthStateChanged","on","snapshot","val","newState","id","itemId","remove","className","onClick","src","photoURL","align","onSubmit","type","placeholder","onChange","map","key","removeItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.637119ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport firebase from 'firebase'\r\n// Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyDiKttA3JxJf9aveiPnUkXBUcABYS4N7Rw\",\r\n    authDomain: \"fun-food-friends-845b4.firebaseapp.com\",\r\n    databaseURL: \"https://fun-food-friends-845b4.firebaseio.com\",\r\n    projectId: \"fun-food-friends-845b4\",\r\n    storageBucket: \"fun-food-friends-845b4.appspot.com\",\r\n    messagingSenderId: \"588260623727\",\r\n    appId: \"1:588260623727:web:6cb13c8f06b23c0817949a\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\nexport default firebase;\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const auth = firebase.auth();","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport firebase, { auth, provider } from './firebase.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentItem: '',\n      username: '',\n      items: [],\n        user: '' // <-- add this line\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n     this.login = this.login.bind(this); // <-- add this line\n  this.logout = this.logout.bind(this); // <-- add this line\n  }\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n  logout() {\n  // we will add the code for this in a moment, but need to add the method now or the bind will throw an error\n  auth.signOut()\n    .then(() => {\n      this.setState({\n        user: ''\n      });\n    });\n}\nlogin() {\n  auth.signInWithPopup(provider) \n    .then((result) => {\n      const user = result.user;\n      this.setState({\n        user\n      });\n    });\n}\n  handleSubmit(e) {\n    e.preventDefault();\n    const itemsRef = firebase.database().ref('items');\n    const item = {\n    title: this.state.currentItem,\n    user: this.state.user.displayName || this.state.user.email\n    }\n    itemsRef.push(item);\n    this.setState({\n      currentItem: '',\n      username: ''\n    });\n  }\n  componentDidMount() {\n        auth.onAuthStateChanged((user) => {\n    if (user) {\n      this.setState({ user });\n    } \n  });\n    const itemsRef = firebase.database().ref('items');\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          user: items[item].user\n        });\n      }\n      this.setState({\n        items: newState\n      });\n    });\n  \n  }\n  removeItem(itemId) {\n    const itemRef = firebase.database().ref(`/items/${itemId}`);\n    itemRef.remove();\n  }\n  render() {\n    return (\n      <div className='App'>\n        <header>\n            <div className=\"wrapper\">\n              <h1>Fun Food Friends</h1>\n                            {this.state.user ?\n    <button className=\"btn btn-danger\" onClick={this.logout}>Log Out</button>                \n    :\n    <button className=\"btn btn-success\" onClick={this.login}>Log In</button>              \n  }  \n            </div>\n        </header>\n          {this.state.user ?\n    <div>\n      <div className='user-profile'>\n        <img className='img-fluid rounded-circle' src={this.state.user.photoURL} />\n      </div>\n         <div className='container'>\n         <div className=\"row\">\n         <div className=\"col\" align=\"center\">\n          <section className='add-item'>\n                <form className=\"form\" onSubmit={this.handleSubmit}>\n          \n                  <input className=\"form-control\" type=\"text\" name=\"currentItem\" placeholder=\"What are you bringing?\" onChange={this.handleChange} value={this.state.currentItem} />\n                <br></br>\n                  <button className=\"btn btn-primary\" >Add Item</button>\n                </form>\n          </section>\n          <section className='display-item'>\n              <div className=\"wrapper\">\n                <ul>\n                  {this.state.items.map((item) => {\n          return (\n            <li key={item.id}>\n              <h3 className=\"text-primary\">{item.title}</h3>\n              <p className=\"text-success\">brought by: {item.user}\n                 {item.user === this.state.user.displayName || item.user === this.state.user.email ?\n                   <button className=\"btn btn-danger\" onClick={() => this.removeItem(item.id)}>Remove Item</button> : null}\n              </p>\n            </li>\n          )\n        })}\n                </ul>\n              </div>\n          </section>\n        </div>\n        </div>\n        </div>\n    </div>\n    :\n   \n  <section className='container'>\n  <div className=\"row\">\n              <div className=\"col-md-7\"  align=\"center\">\n                <ul>\n                  {this.state.items.map((item) => {\n          return (\n            <li key={item.id}>\n              <h3 className=\"text-primary\">{item.title}</h3>\n              <p className=\"text-success\">brought by: {item.user}\n                 {item.user === this.state.user.displayName || item.user === this.state.user.email ?\n                   <button className=\"btn btn-danger\"  onClick={() => this.removeItem(item.id)}>Remove Item</button> : null}\n              </p>\n            </li>\n          )\n        })}\n                </ul>\n              </div>\n              </div>\n          </section>\n \n  }\n     \n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}